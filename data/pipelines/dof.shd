include "pipelines/common.glsl"

vertex_shader [[
	struct Output {
		float2 uv : TEXCOORD0;
		float4 position : SV_POSITION;
	};

	Output main(uint vertex_id : SV_VertexID) {
		Output output;
		output.position = fullscreenQuad(vertex_id, output.uv);
		return output;
	}
]]


fragment_shader [[
	cbuffer Drawcall : register(b4) {
		float u_distance;
		float u_range;
		float u_max_blur_size;
		float u_sharp_range;
		uint u_texture;
		uint u_depth;
	};

	static const float GOLDEN_ANGLE = 2.39996323; 
	static const float RAD_SCALE = 0.5; 

	float getBlurSize(float depth, float focus_point) {
		float d = depth - focus_point;
		d = abs(d) < u_sharp_range ? 0 : d - u_sharp_range;
		float coc = clamp(d / u_range, -1.0, 1.0);
		return abs(coc) * u_max_blur_size;
	}

	// https://blog.voxagon.se/2018/05/04/bokeh-depth-of-field-in-single-pass.html
	float3 depthOfField(float2 tex_coord, float focus_point) {
		float center_depth = toLinearDepth(Global_inv_projection, sampleBindless(LinearSamplerClamp, u_depth, tex_coord).r);
		float center_size = getBlurSize(center_depth, focus_point);
		float3 color = sampleBindless(LinearSamplerClamp, u_texture, tex_coord).rgb;
		float tot = 1.0;
		float radius = RAD_SCALE;
		float2 view_size_rcp = 1.0 / Global_framebuffer_size;
		for (float ang = 0.0; radius < u_max_blur_size; ang += GOLDEN_ANGLE) {
			float2 tc = tex_coord + float2(cos(ang), sin(ang)) * view_size_rcp * radius;
			float3 sample_color = sampleBindless(LinearSamplerClamp, u_texture, tc).rgb;
			float sample_depth = toLinearDepth(Global_inv_projection, sampleBindless(LinearSamplerClamp, u_depth, tc).r);
			float sample_size = getBlurSize(sample_depth, focus_point);
			if (sample_depth > center_depth)
				sample_size = clamp(sample_size, 0.0, center_size * 2.0);
			float m = smoothstep(radius - 0.5, radius + 0.5, sample_size);
			color += lerp(color / tot, sample_color, m);
			tot += 1.0;
			radius += RAD_SCALE / radius;
		}
		return color /= tot;
	}

	float4 main(float2 uv : TEXCOORD0) : SV_TARGET {
		return float4(depthOfField(uv, u_distance), 1);
	}
]]