------------------

include "pipelines/common.glsl"

vertex_shader [[
	struct Output {
		float2 uv : TEXCOORD0;
		float4 position : SV_POSITION;
	};

	Output main(uint vertex_id : SV_VertexID) {
		Output output;
		output.position = fullscreenQuad(vertex_id, output.uv);
		return output;
	}
]]

---------------------

fragment_shader [[
	cbuffer DC : register(b4) {
		uint u_mask;
	}
	
	float4 main(float2 uv : TEXCOORD0) : SV_TARGET {
		if(sampleBindlessLod(LinearSamplerClamp, u_mask, uv, 0).r > 0) discard;
		
		float2 view_texel = 1.0 / Global_framebuffer_size;
		
		int c = 0;
		for(int i = 0; i < 3; ++i) {
			// TODO sampleBindlessLodOffet?
			if(sampleBindlessLod(LinearSamplerClamp, u_mask, uv + float2(view_texel.x * i, 0), 0).r == 0) ++c;
			if(sampleBindlessLod(LinearSamplerClamp, u_mask, uv + float2(-view_texel.x * i, 0), 0).r == 0) ++c;
			if(sampleBindlessLod(LinearSamplerClamp, u_mask, uv + float2(0, view_texel.y * i), 0).r == 0) ++c;
			if(sampleBindlessLod(LinearSamplerClamp, u_mask, uv + float2(0, -view_texel.y * i), 0).r == 0) ++c;
		}

		if (c == 12) discard;
		return float4(1, 0.5, 0, 1.0f);
	}
]]