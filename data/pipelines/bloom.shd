include "pipelines/common.glsl"

vertex_shader [[
	struct Output {
		float2 uv : TEXCOORD0;
		float4 position : SV_POSITION;
	};

	Output main(uint vertex_id : SV_VertexID) {
		Output output;
		output.position = fullscreenQuad(vertex_id, output.uv);
		return output;
	}

]]

fragment_shader [[
	#ifdef EXTRACT
		cbuffer Data : register(b4) {
			float u_avg_lum_multiplier;
			uint b_histogram;
			uint u_input;
		};

		float4 main(float2 uv : TEXCOORD0) : SV_TARGET {
			float avg_lum = asfloat(bindless_buffers[b_histogram].Load(256 * 4));
			float3 c = sampleBindless(LinearSamplerClamp, u_input, uv).rgb;
			float _luminance = luminance(c);
			float multiplier = saturate(1 + _luminance - avg_lum * u_avg_lum_multiplier);
			return float4(c * multiplier, 1);
		}
	#elif defined DOWNSCALE
		cbuffer Data : register(b4) {
			uint u_input;
		};

		float4 main(float2 uv : TEXCOORD0) : SV_TARGET {
			float4 o_color = sampleBindless(LinearSamplerClamp, u_input, uv) ;
			o_color += sampleBindlessOffset(LinearSamplerClamp, u_input, uv, int2(1, 0)) ;
			o_color += sampleBindlessOffset(LinearSamplerClamp, u_input, uv, int2(1, 1)) ;
			o_color += sampleBindlessOffset(LinearSamplerClamp, u_input, uv, int2(0, 1)) ;
			o_color *= 0.25;
			return o_color;
		}
	#else
		cbuffer Data : register(b4) {
			uint u_input;
		};

		float4 main(float2 uv : TEXCOORD0) : SV_TARGET {
			return sampleBindless(LinearSamplerClamp, u_input, uv);
		}
	#endif
]]