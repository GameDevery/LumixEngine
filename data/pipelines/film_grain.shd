include "pipelines/common.glsl"

vertex_shader [[
	struct Output {
		float2 uv : TEXCOORD0;
		float4 position : SV_POSITION;
	};
	
	Output main(uint vertex_id : SV_VertexID) {
		Output output;
		output.position = fullscreenQuad(vertex_id, output.uv);
		return output;
	}
]]


fragment_shader [[
	cbuffer Drawcall : register(b4) {
		float u_intensity;
		float u_lumamount;
		uint u_source;
		uint u_noise;
	};

	float3 filmGrain(float2 tex_coord, float3 in_color, float2 frag_coord) {
		int2 texture_size = int2(textureSize(bindless_textures[u_noise], 0));
		int2 ij = (int2(frag_coord) + Global_time * 1e4) % texture_size;
		float3 noise = bindless_textures[u_noise][ij].xyz;
		float _luminance = lerp(0.0, luminance(in_color), u_lumamount);
		float lum = smoothstep(0.2, 0.0, _luminance) + _luminance;
		lum += _luminance;
		
		noise = lerp(0, pow(lum, 4.0), noise);
		return in_color + noise * u_intensity;
	}

	float4 main(float2 uv : TEXCOORD0, float4 frag_coord : SV_POSITION) : SV_TARGET {
		float3 c = sampleBindless(LinearSamplerClamp, u_source, uv).rgb;
		return float4(filmGrain(uv, c, frag_coord.xy), 1);
	}
]]